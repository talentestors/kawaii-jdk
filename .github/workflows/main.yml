#
# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'OpenJDK GHA Sanity Checks'

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "*.*.*"
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platform(s) to execute on (comma separated, e.g. "linux-x64, macos")'
        required: true
        default: 'linux-x64, macos-x64, windows-x64'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  ###
  ### Determine platforms to include
  ###

  select:
    name: 'Select platforms'
    runs-on: ubuntu-20.04
    outputs:
      dependencies: ${{ steps.check_deps.outputs.dependencies }}
      linux-x64: ${{ steps.include.outputs.linux-x64 }}
      macos-x64: ${{ steps.include.outputs.macos-x64 }}
      windows-x64: ${{ steps.include.outputs.windows-x64 }}
      JDK_VERSION: ${{ steps.show_versions.outputs.JDK_VERSION }}

    steps:
        # This function must be inlined in main.yml, or we'd be forced to checkout the repo
      - name: 'Check what jobs to run'
        id: include
        run: |
          # Determine which platform jobs to run

          # Returns 'true' if the input platform list matches any of the platform monikers given as argument,
          # 'false' otherwise.
          # arg $1: platform name or names to look for
          function check_platform() {
            if [[ '${{ !secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/') }}' == 'false' ]]; then
              # If JDK_SUBMIT_FILTER is set, and this is not a "submit/" branch, don't run anything
              echo 'false'
              return
            fi

            if [[ $GITHUB_EVENT_NAME == workflow_dispatch ]]; then
              input='${{ github.event.inputs.platforms }}'
            elif [[ $GITHUB_EVENT_NAME == push ]]; then
              input='${{ secrets.JDK_SUBMIT_PLATFORMS }}'
            else
              echo 'Internal error in GHA'
              exit 1
            fi

            normalized_input="$(echo ,$input, | tr -d ' ')"
            if [[ "$normalized_input" == ",," ]]; then
              # For an empty input, assume all platforms should run
              echo 'true'
              return
            else
              # Check for all acceptable platform names
              for part in $* ; do
                if echo "$normalized_input" | grep -q -e ",$part," ; then
                  echo 'true'
                  return
                fi
              done
            fi

            echo 'false'
          }

          echo "linux-x64=$(check_platform linux-x64 linux x64)" >> $GITHUB_OUTPUT
          echo "macos-x64=$(check_platform macos-x64 macos x64)" >> $GITHUB_OUTPUT
          echo "windows-x64=$(check_platform windows-x64 windows x64)" >> $GITHUB_OUTPUT

      - name: Checkout the source
        uses: actions/checkout@v3
        with:
          path: jdk
        if: steps.include.outputs.linux-x64 == 'true' || steps.include.outputs.linux-x86 == 'true' || steps.include.outputs.macos-x64 == 'true' || steps.include.outputs.windows-x64 == 'true'
  
      - name: Show dirictory
        run: |
          ls -la jdk
      
      - name: Determine versions and locations to be used for dependencies
        id: check_deps
        run: "echo dependencies=`cat jdk/make/conf/version-numbers.conf | sed -e '1i {' -e 's/#.*//g' -e 's/\"//g' -e 's/\\(.*\\)=\\(.*\\)/\"\\1\": \"\\2\",/g' -e '$s/,\\s\\{0,\\}$/\\}/'` >> $GITHUB_OUTPUT"
        if: steps.include.outputs.linux-x64 == 'true' || steps.include.outputs.linux-x86 == 'true' || steps.include.outputs.macos-x64 == 'true' || steps.include.outputs.windows-x64 == 'true'

      - name: Show versions
        id: show_versions
        run: |
          JDK_VERSION_FEATURE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_FEATURE }}
          JDK_VERSION_INTERIM=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_INTERIM }}
          JDK_VERSION_UPDATE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_UPDATE }}
          JDK_VERSION_PATCH=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_PATCH }}
          JDK_VERSION=$JDK_VERSION_FEATURE.$JDK_VERSION_INTERIM.$JDK_VERSION_UPDATE.$JDK_VERSION_PATCH 
          echo $JDK_VERSION >> $GITHUB_OUTPUT
        if: steps.include.outputs.linux-x64 == 'true' || steps.include.outputs.linux-x86 == 'true' || steps.include.outputs.macos-x64 == 'true' || steps.include.outputs.windows-x64 == 'true'

  ###
  ### Build jobs
  ###

  build-linux-x64:
    name: linux-x64
    needs: select
    uses: ./.github/workflows/build-linux.yml
    with:
      platform: linux-x64
      apt-gcc-version: '11'
      JDK_VERSION: ${{ needs.select.outputs.JDK_VERSION }}
    # The linux-x64 jdk bundle is used as buildjdk for the cross-compile job
    if: needs.select.outputs.linux-x64 == 'true'

  build-macos-x64:
    name: macos-x64
    needs: select
    uses: ./.github/workflows/build-macos.yml
    with:
      platform: macos-x64
      xcode-toolset-version: '11.7'
      JDK_VERSION: ${{ needs.select.outputs.JDK_VERSION }}
    if: needs.select.outputs.macos-x64 == 'true'

  build-windows-x64:
    name: windows-x64
    needs: select
    uses: ./.github/workflows/build-windows.yml
    with:
      platform: windows-x64
      msvc-toolset-version: '14.29'
      msvc-toolset-architecture: 'x86.x64'
      JDK_VERSION: ${{ needs.select.outputs.JDK_VERSION }}
    if: needs.select.outputs.windows-x64 == 'true'

  Release:
    name: Upload Release Asset
    runs-on: "ubuntu-20.04"
    if: always()
    continue-on-error: true
    permissions:
      contents: write
    
    needs:
      - select
      - build-windows-x64
      - build-macos-x64
      - build-linux-x64

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3
        
      - name: Load artifact all
        uses: actions/download-artifact@v3
        with:
          path: msjdk

      - name: show dirictory
        run: |
          ls -la 

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_REPOSITORY: talentestors/kawaii-jdk8
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body_path: .github/CHANGELOG.md
          draft: false
          fail_on_unmatched_files: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            msjdk/*/*.tar.gz
            msjdk/*/*.zip